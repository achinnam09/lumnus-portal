generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RecruitmentCycle {
  id          Int           @id @default(autoincrement())
  label       String        @unique
  applicants  Applicant[]
  Application Application[]
  events      Event[]
  applications Application[]
}

model Applicant {
  id               Int              @id @default(autoincrement())
  name             String
  pid              String
  cycleId          Int
  recruitmentCycle RecruitmentCycle @relation(fields: [cycleId], references: [id])
  Application      Application?
  attendances      Attendance[]

  @@unique([pid, cycleId])

  application  Application?
  @@unique ([pid, cycleId]) // prevents multiple same-PID per recruitment cycle
}

model Event {
  id               Int              @id @default(autoincrement())
  name             String
  date             DateTime
  cycleId          Int
  attendances      Attendance[]
  recruitmentCycle RecruitmentCycle @relation(fields: [cycleId], references: [id])
}

model Attendance {
  id          Int       @id @default(autoincrement())
  timestamp   DateTime  @default(now())
  applicantId Int
  eventId     Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])

  @@unique([applicantId, eventId])
}

model Application {
  id               Int              @id @default(autoincrement())
  applicantId      Int              @unique
  cycleId          Int
  year             String
  email            String
  major            String
  minor            String?
  track            Track
  essay1           String
  essay2           String
  resumeUrl        String
  headshotUrl      String
  heardFrom        String
  createdAt        DateTime         @default(now())
  Applicant        Applicant        @relation(fields: [applicantId], references: [id])
  RecruitmentCycle RecruitmentCycle @relation(fields: [cycleId], references: [id])

  @@unique([applicantId, cycleId])
}

enum Track {
  Strategy
  DataAnalytics

  @@unique([applicantId, eventId]) // prevents double check-in for an event
}

enum Track{
  Strategy
  DataAnalytics
}

model Application {
  id            Int       @id @default(autoincrement())

  applicantId   Int @unique
  applicant     Applicant @relation(fields: [applicantId], references: [id])

  cycleId       Int
  recruitmentCycle RecruitmentCycle @relation(fields: [cycleId], references: [id])

  year          String
  email         String
  major         String
  minor         String?
  track         Track
  essay1        String
  essay2        String
  resumeUrl     String
  headshotUrl   String
  heardFrom     String
  createdAt     DateTime  @default(now())

  @@unique([applicantId, cycleId]) // Enforces one app per cycle per applicant
}

